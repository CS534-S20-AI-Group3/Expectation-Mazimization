from common_functions import *
from em_with_plot import *
import random
import numpy
import sys
from matplotlib import pyplot as plt
from expect_maximum_clusters import *
from matplotlib import animation


def k_means_clustering(data, num_clust):
    print("Running K means")
    data_set = read_board(data)
    init_clusters = init_k_means(data_set, int(num_clust))
    kmean_clusters = k_means(data_set, init_clusters)
    clusters = kmean_clusters[0] # clusters generated by k-means clustering
    means = kmean_clusters[1] # means generated by k-means clustering
    print("K means completed")
    print("K means clusters")
    for i in clusters:
        print(i)
    print("K means means")
    for m in means:
        print(m)
    # plotting the k means if dimension is 2
    if(len(data_set[0])==2):
        color_bar = []
        for e in range(len(means)):
            f = (random.uniform(0.1, 1), random.uniform(0, 1), random.uniform(0, 1))
            color_bar.append(f)
        plt.figure(1)
        ax1 = plt.subplot(211)
        i = 0
        for c in clusters:
            for p in c:
                # print(c_string[i])
                ax1.plot(p[0], p[1], color = color_bar[i], marker='o', markersize=15, alpha=0.4, mec=color_bar[i],
                         mew=0)
            i = i + 1
        i = 0
        for m in means:
            ax1.plot(m[0],m[1], color=color_bar[i], marker='d', markersize=8, markeredgecolor='k',
                    markeredgewidth=1)
            i=i+1
        ax1.set_title('K-means')

    return means
    #print(len(clusters))

file_path = r"/home/ankit/git/AI/assignment_2/Expectation-Mazimization/sample_EM_data.csv"
no_of_clusters = 4
means_k = k_means_clustering(file_path,no_of_clusters)
print(" Passing means from K means to EM ")
#for i in range(2,12):
em_clustering(file_path,no_of_clusters,means_k)
plt.show()

# if __name__ == "__main__":
#     if len(sys.argv) == 3:
#         expect_max(sys.argv[1], sys.argv[2])
from common_functions import *
from em_with_plot import *
import random
import numpy
import sys
from matplotlib import pyplot as plt
from expect_maximum_clusters import *
import time

def k_means_clustering(data, num_clust):
    print("Running K means")
    data_set = read_board(data)
    init_clusters = init_k_means(data_set, int(num_clust))
    kmean_clusters = k_means(data_set, init_clusters)
    clusters = kmean_clusters[0] # clusters generated by k-means clustering
    means = kmean_clusters[1] # means generated by k-means clustering
    print("K means completed")
    print("K means clusters")
    for i in clusters:
        print(i)
    print("K means means")
    for m in means:
        print(m)
    # plotting the k means if dimension is 2
    if(len(data_set[0])==2):
        color_bar = []
        for e in range(len(means)):
            f = (random.uniform(0.1, 1), random.uniform(0, 1), random.uniform(0, 1))
            color_bar.append(f)
        plt.figure(1)
        ax1 = plt.subplot(211)
        i = 0
        for c in clusters:
            for p in c:
                # print(c_string[i])
                ax1.plot(p[0], p[1], color = color_bar[i], marker='o', markersize=15, alpha=0.4, mec=color_bar[i],
                         mew=0)
            i = i + 1
        i = 0
        for m in means:
            ax1.plot(m[0],m[1], color=color_bar[i], marker='d', markersize=8, markeredgecolor='k',
                    markeredgewidth=1)
            i=i+1
        ax1.set_title('K-means')

    return means
    #print(len(clusters))
def em_restart(file_path,no_k):
    given_points = np.array(read_board(file_path))
    start_time = time.perf_counter()
    no_of_clusters = no_k
    # means_k = k_means_clustering(file_path,no_of_clusters)
    # print(" Passing means from K means to EM ")
    # for i in range(2,12):
    sol_ll = 0
    sol_clusters = []
    sol_em = []
    restart = True
    if(no_of_clusters==0):
        bic_bool=True
    else:
        bic_bool = False
    print("Running EM with restart")
    print("no of clusters", no_of_clusters)
    print("Number of Dimensions", len(given_points[0]))
    print("NUmber of points", len(given_points))
    if(no_of_clusters!=0):

        while (restart):
            end_time = time.perf_counter()
            if (end_time - start_time > 9):
                restart = False
                print("best ll ", sol_ll)
                print("clusters", sol_clusters)
                print("EM mean , covar , weight", sol_em)
                print("end time", end_time - start_time)
                break
            sol = em_clustering(given_points, no_of_clusters,bic_bool)
            #print("ll",sol[0],sol[1],sol[2])
            if(sol[0]>sol_ll or sol_ll==0):
                sol_ll = sol[0]
                sol_clusters = sol[1]
                sol_em = sol[2]
            end_time = time.perf_counter()

        # if (no_of_dim == 2):
        #     color_bar = []
        #     for e in em_clusters:
        #         f = (random.uniform(0.1, 1), random.uniform(0, 1), random.uniform(0, 1))
        #         color_bar.append(f)
        #     l = 0
        #     for p in final_prob_dist:
        #         # print(p)
        #         c = p.index(max(p))
        #         # print(c)
        #         ax.plot(given_points[l][0], given_points[l][1], color=color_bar[c], marker='o', markersize=10,
        #                 alpha=0.4,
        #                 mec=color_bar[c], mew=0)
        #         l = l + 1
        #
        #     i = 0
        #     for e in em_clusters:
        #         #     # circle2 = plt.Circle((e[0][0], e[0][1]),radius=e[1],color='green',fill=False)
        #         #     # ax.add_artist(circle2)
        #         ax.plot(e[0][0], e[0][1], color=color_bar[i], marker='d', markersize=8, markeredgecolor='k',
        #                 markeredgewidth=1)
        #         i = i + 1
        #     #     # print("final circle plotted")
        #     ax.set_title('EM , LL ' + str(best_ll))
        #plt.show()
    else:
        print("Running BIC")
        start_k = 1
        run = True
        while(run):
            end_time = time.perf_counter()
            if (end_time - start_time > 9):
                run = False
                print("best ll ", sol_ll)
                print("clusters", sol_clusters)
                print("EM mean , covar , weight", sol_em)
                print("end time", end_time - start_time)
                break
            sol = em_clustering(given_points, start_k,bic_bool)
            #print("ll", sol[0], sol[1], sol[2])
            bic = start_k*np.log(len(given_points))-2*sol[0]
            print("BIC for k ",start_k,bic)
            if (sol[0] > sol_ll or sol_ll == 0):
                sol_ll = sol[0]
                sol_clusters = sol[1]
                sol_em = sol[2]
            start_k = start_k+1


file_path = r"/home/ankit/git/AI/assignment_2/Expectation-Mazimization/sample_EM_data.csv"
em_restart(file_path,0)
# if __name__ == "__main__":
#     if len(sys.argv) == 3:
#         expect_max(sys.argv[1], sys.argv[2])